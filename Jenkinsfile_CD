pipeline {
    agent {
        label 'ubuntu22_04'
    }

    parameters {
        // booleanParam(name: 'autoApprove', defaultValue: false, description: 'Automatically run apply after generating plan?')
        // choice(name: 'dockerImage', choices: ['marinaimeninnik/spring-framework-petclinic:latest'], description: 'Docker image to deploy')
        choice(name: 'environment', choices: ['dev', 'qa'], description: 'Select environment for deployment')

    }

    environment {
        DOCKERHUB_CREDENTIALS = credentials('3fd6e258-dfed-4537-a548-c3272953e573')
    }

    stages {
        stage('Clean workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Checkout') {
            steps{
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/marinaimeninnik/spring-framework-petclinic.git']])
            }
        }

        stage('Run container on ${environment} server') {
            steps {
                script{
                    def dockerRun = 'sudo docker run -p 8080:8080 -d marinaimeninnik/spring-framework-petclinic:latest'
                    withCredentials([usernamePassword(credentialsId: '3fd6e258-dfed-4537-a548-c3272953e573', usernameVariable: 'DOCKERHUB_CREDENTIALS_USR', passwordVariable: 'DOCKERHUB_CREDENTIALS_PSW')]) {                        
                        sshagent(['dev-server']) {
                            sh "ssh -o StrictHostKeyChecking=no ubuntu@18.193.72.131 <<< EOF
                                echo 'hello there'
                                echo '$DOCKERHUB_CREDENTIALS_PSW'
                            //    sudo docker login -u \$DOCKERHUB_CREDENTIALS_USR -p \$DOCKERHUB_CREDENTIALS_PSW
                            //    $dockerRun
                               EOF
                            "
                            // sh 'ssh -o StrictHostKeyChecking=no ubuntu@172.31.28.145 ${dockerRun}'
                        }
                    }
                }    
            }
        }
    }
}